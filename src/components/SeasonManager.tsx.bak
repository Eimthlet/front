import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControlLabel,
  Switch,
  IconButton,
  Chip,
  Tooltip,
  CircularProgress,
  Tabs,
  Tab,
  Divider
} from '@mui/material';
import { 
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  People as PeopleIcon,
  CloudUpload as CloudUploadIcon,
  Check as CheckIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import api from '../utils/api';

interface Season {
  id: number;
  name: string;
  description: string | null;
  start_date: string;
  end_date: string;
  is_active: boolean;
  is_qualification_round: boolean;
  minimum_score_percentage: number;
  created_at: string;
  updated_at: string;
  question_count: number;
  attempts_count: number;
  qualified_users_count: number;
}

interface Question {
  question_text: string;
  options: string[];
  correct_answer: string;
  category?: string;
  difficulty?: string;
}

interface QualifiedUser {
  id: number;
  username: string;
  email: string;
  score: number;
  percentage_score: number;
  completed_at: string;
}

const SeasonManager: React.FC = () => {
  const [seasons, setSeasons] = useState<Season[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const [openDialog, setOpenDialog] = useState(false);
  const [dialogMode, setDialogMode] = useState<'create' | 'edit'>('create');
  const [currentSeason, setCurrentSeason] = useState<Partial<Season>>({
    name: '',
    description: '',
    start_date: new Date().toISOString(),
    end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    is_active: false,
    is_qualification_round: false,
    minimum_score_percentage: 50
  });
  
  const [openQuestionsDialog, setOpenQuestionsDialog] = useState(false);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState<Question>({
    question_text: '',
    options: ['', '', '', ''],
    correct_answer: ''
  });
  
  const [openQualifiedUsersDialog, setOpenQualifiedUsersDialog] = useState(false);
  const [qualifiedUsers, setQualifiedUsers] = useState<QualifiedUser[]>([]);
  const [selectedSeasonId, setSelectedSeasonId] = useState<number | null>(null);
  
  const [tabValue, setTabValue] = useState(0);
  
  // Fetch seasons
  useEffect(() => {
    const fetchSeasons = async () => {
      try {
        setLoading(true);
        const response = await api.get('/api/admin/seasons');
        setSeasons(response.data);
        setError(null);
      } catch (err: any) {
        console.error('Error fetching seasons:', err);
        setError(err.message || 'Failed to load seasons');
      } finally {
        setLoading(false);
      }
    };
    
    fetchSeasons();
  }, []);
  
  // Handle dialog open/close
  const handleOpenDialog = (mode: 'create' | 'edit', season?: Season) => {
    setDialogMode(mode);
    if (mode === 'edit' && season) {
      setCurrentSeason({
        ...season,
        start_date: season.start_date,
        end_date: season.end_date
      });
    } else {
      setCurrentSeason({
        name: '',
        description: '',
        start_date: new Date().toISOString(),
        end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        is_active: false,
        is_qualification_round: false,
        minimum_score_percentage: 50
      });
    }
    setOpenDialog(true);
  };
  
  const handleCloseDialog = () => {
    setOpenDialog(false);
  };
  
  // Handle season form changes
  const handleSeasonChange = (field: string, value: any) => {
    setCurrentSeason(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  // Handle season form submission
  const handleSubmitSeason = async () => {
    try {
      if (dialogMode === 'create') {
        await api.post('/api/admin/seasons', currentSeason);
      } else {
        await api.put(`/api/admin/seasons/${currentSeason.id}`, currentSeason);
      }
      
      // Refresh seasons list
      const response = await api.get('/api/admin/seasons');
      setSeasons(response.data);
      
      handleCloseDialog();
    } catch (err: any) {
      console.error('Error saving season:', err);
      setError(err.message || 'Failed to save season');
    }
  };
  
  // Handle season deletion
  const handleDeleteSeason = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this season? This action cannot be undone.')) {
      return;
    }
    
    try {
      await api.delete(`/api/admin/seasons/${id}`);
      
      // Refresh seasons list
      const response = await api.get('/api/admin/seasons');
      setSeasons(response.data);
    } catch (err: any) {
      console.error('Error deleting season:', err);
      setError(err.message || 'Failed to delete season');
    }
  };
  
  // Handle questions dialog
  const handleOpenQuestionsDialog = (seasonId: number) => {
    setSelectedSeasonId(seasonId);
    setQuestions([]);
    setCurrentQuestion({
      question_text: '',
      options: ['', '', '', ''],
      correct_answer: ''
    });
    setOpenQuestionsDialog(true);
  };
  
  const handleCloseQuestionsDialog = () => {
    setOpenQuestionsDialog(false);
  };
  
  // Handle question form changes
  const handleQuestionChange = (field: string, value: any) => {
    setCurrentQuestion(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleOptionChange = (index: number, value: string) => {
    setCurrentQuestion(prev => {
      const newOptions = [...prev.options];
      newOptions[index] = value;
      return {
        ...prev,
        options: newOptions
      };
    });
  };
  
  // Add question to list
  const handleAddQuestion = () => {
    if (!currentQuestion.question_text || !currentQuestion.correct_answer) {
      return;
    }
    
    setQuestions(prev => [...prev, { ...currentQuestion }]);
    setCurrentQuestion({
      question_text: '',
      options: ['', '', '', ''],
      correct_answer: ''
    });
  };
  
  // Remove question from list
  const handleRemoveQuestion = (index: number) => {
    setQuestions(prev => prev.filter((_, i) => i !== index));
  };
  
  // Submit questions
  const handleSubmitQuestions = async () => {
    if (!selectedSeasonId || questions.length === 0) {
      return;
    }
    
    try {
      await api.post(`/api/admin/seasons/${selectedSeasonId}/questions`, {
        questions
      });
      
      // Refresh seasons list
      const response = await api.get('/api/admin/seasons');
      setSeasons(response.data);
      
      handleCloseQuestionsDialog();
    } catch (err: any) {
      console.error('Error adding questions:', err);
      setError(err.message || 'Failed to add questions');
    }
  };
  
  // Handle qualified users dialog
  const handleOpenQualifiedUsersDialog = async (seasonId: number) => {
    setSelectedSeasonId(seasonId);
    setQualifiedUsers([]);
    setOpenQualifiedUsersDialog(true);
    
    try {
      const response = await api.get(`/api/admin/seasons/${seasonId}/qualified-users`);
      setQualifiedUsers(response.data);
    } catch (err: any) {
      console.error('Error fetching qualified users:', err);
      setError(err.message || 'Failed to load qualified users');
    }
  };
  
  const handleCloseQualifiedUsersDialog = () => {
    setOpenQualifiedUsersDialog(false);
  };
  
  // Handle tab change
  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };
  
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
        <CircularProgress />
      </Box>
    );
  }
  
  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1">
          Season Manager
        </Typography>
        <Button 
          variant="contained" 
          startIcon={<AddIcon />}
          onClick={() => handleOpenDialog('create')}
        >
          Create Season
        </Button>
      </Box>
      
      {error && (
        <Box sx={{ mb: 3, p: 2, bgcolor: 'error.light', borderRadius: 1 }}>
          <Typography color="error">{error}</Typography>
        </Box>
      )}
      
      <Tabs value={tabValue} onChange={handleTabChange} sx={{ mb: 2 }}>
        <Tab label="All Seasons" />
        <Tab label="Active Seasons" />
        <Tab label="Qualification Rounds" />
      </Tabs>
      
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Period</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Questions</TableCell>
              <TableCell>Attempts</TableCell>
              <TableCell>Qualified Users</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {seasons
              .filter(season => {
                if (tabValue === 0) return true;
                if (tabValue === 1) return season.is_active;
                if (tabValue === 2) return season.is_qualification_round;
                return true;
              })
              .map(season => (
                <TableRow key={season.id}>
                  <TableCell>
                    <Typography variant="subtitle1">{season.name}</Typography>
                    {season.description && (
                      <Typography variant="body2" color="textSecondary">
                        {season.description}
                      </Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2">
                      {format(new Date(season.start_date), 'MMM d, yyyy')} - {format(new Date(season.end_date), 'MMM d, yyyy')}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      {season.is_active && (
                        <Chip 
                          label="Active" 
                          color="success" 
                          size="small" 
                          icon={<CheckIcon />} 
                        />
                      )}
                      {season.is_qualification_round && (
                        <Chip 
                          label="Qualification" 
                          color="primary" 
                          size="small" 
                        />
                      )}
                      {!season.is_active && !season.is_qualification_round && (
                        <Chip 
                          label="Inactive" 
                          color="default" 
                          size="small" 
                        />
                      )}
                    </Box>
                  </TableCell>
                  <TableCell>{season.question_count}</TableCell>
                  <TableCell>{season.attempts_count}</TableCell>
                  <TableCell>{season.qualified_users_count}</TableCell>
                  <TableCell>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <Tooltip title="Edit Season">
                        <IconButton 
                          size="small" 
                          onClick={() => handleOpenDialog('edit', season)}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Add Questions">
                        <IconButton 
                          size="small" 
                          onClick={() => handleOpenQuestionsDialog(season.id)}
                        >
                          <CloudUploadIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="View Qualified Users">
                        <IconButton 
                          size="small" 
                          onClick={() => handleOpenQualifiedUsersDialog(season.id)}
                        >
                          <PeopleIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Delete Season">
                        <IconButton 
                          size="small" 
                          color="error" 
                          onClick={() => handleDeleteSeason(season.id)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
        </Table>
      </TableContainer>
      
      {/* Season Dialog */}
      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>
          {dialogMode === 'create' ? 'Create New Season' : 'Edit Season'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 1 }}>
            <TextField 
              label="Season Name"
              fullWidth
              value={currentSeason.name || ''}
              onChange={(e) => handleSeasonChange('name', e.target.value)}
              required
            />
            
            <TextField 
              label="Description"
              fullWidth
              multiline
              rows={3}
              value={currentSeason.description || ''}
              onChange={(e) => handleSeasonChange('description', e.target.value)}
            />
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                label="Start Date"
                type="datetime-local"
                value={new Date(currentSeason.start_date || new Date()).toISOString().slice(0, 16)}
                onChange={(e) => handleSeasonChange('start_date', new Date(e.target.value).toISOString())}
                fullWidth
                InputLabelProps={{ shrink: true }}
              />
              
              <TextField
                label="End Date"
                type="datetime-local"
                value={new Date(currentSeason.end_date || new Date()).toISOString().slice(0, 16)}
                onChange={(e) => handleSeasonChange('end_date', new Date(e.target.value).toISOString())}
                fullWidth
                InputLabelProps={{ shrink: true }}
              />
            </Box>
            
            <Box sx={{ display: 'flex', gap: 2 }}>
              <FormControlLabel
                control={
                  <Switch 
                    checked={currentSeason.is_active || false}
                    onChange={(e) => handleSeasonChange('is_active', e.target.checked)}
                  />
                }
                label="Active Season"
              />
              
              <FormControlLabel
                control={
                  <Switch 
                    checked={currentSeason.is_qualification_round || false}
                    onChange={(e) => handleSeasonChange('is_qualification_round', e.target.checked)}
                  />
                }
                label="Qualification Round"
              />
            </Box>
            
            <TextField 
              label="Minimum Score Percentage to Qualify (%)"
              type="number"
              inputProps={{ min: 0, max: 100 }}
              value={currentSeason.minimum_score_percentage || 50}
              onChange={(e) => handleSeasonChange('minimum_score_percentage', parseInt(e.target.value))}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button 
            variant="contained" 
            onClick={handleSubmitSeason}
            disabled={!currentSeason.name || !currentSeason.start_date || !currentSeason.end_date}
          >
            {dialogMode === 'create' ? 'Create' : 'Save'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Questions Dialog */}
      <Dialog open={openQuestionsDialog} onClose={handleCloseQuestionsDialog} maxWidth="md" fullWidth>
        <DialogTitle>Add Questions to Season</DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, pt: 1 }}>
            <Box sx={{ bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>
              <Typography variant="h6" gutterBottom>
                New Question
              </Typography>
              
              <TextField 
                label="Question Text"
                fullWidth
                value={currentQuestion.question_text}
                onChange={(e) => handleQuestionChange('question_text', e.target.value)}
                margin="normal"
                required
              />
              
              <Typography variant="subtitle1" sx={{ mt: 2, mb: 1 }}>
                Options:
              </Typography>
              
              {currentQuestion.options.map((option, index) => (
                <Box key={index} sx={{ display: 'flex', gap: 1, mb: 1 }}>
                  <TextField 
                    label={`Option ${index + 1}`}
                    fullWidth
                    value={option}
                    onChange={(e) => handleOptionChange(index, e.target.value)}
                  />
                  
                  <IconButton 
                    color={currentQuestion.correct_answer === option ? 'success' : 'default'}
                    onClick={() => handleQuestionChange('correct_answer', option)}
                    disabled={!option}
                  >
                    {currentQuestion.correct_answer === option ? <CheckIcon /> : <RadioButtonUncheckedIcon />}
                  </IconButton>
                </Box>
              ))}
              
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                <TextField 
                  label="Category"
                  value={currentQuestion.category || ''}
                  onChange={(e) => handleQuestionChange('category', e.target.value)}
                />
                
                <TextField 
                  label="Difficulty"
                  select
                  value={currentQuestion.difficulty || 'Medium'}
                  onChange={(e) => handleQuestionChange('difficulty', e.target.value)}
                  SelectProps={{
                    native: true,
                  }}
                >
                  <option value="Easy">Easy</option>
                  <option value="Medium">Medium</option>
                  <option value="Hard">Hard</option>
                </TextField>
              </Box>
              
              <Button 
                variant="contained" 
                onClick={handleAddQuestion}
                disabled={!currentQuestion.question_text || !currentQuestion.correct_answer}
                sx={{ mt: 2 }}
              >
                Add Question
              </Button>
            </Box>
            
            {questions.length > 0 && (
              <Box>
                <Typography variant="h6" gutterBottom>
                  Questions to Add ({questions.length})
                </Typography>
                
                <TableContainer component={Paper} sx={{ maxHeight: 300 }}>
                  <Table stickyHeader size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Question</TableCell>
                        <TableCell>Correct Answer</TableCell>
                        <TableCell>Category</TableCell>
                        <TableCell>Difficulty</TableCell>
                        <TableCell>Actions</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {questions.map((q, index) => (
                        <TableRow key={index}>
                          <TableCell>{q.question_text}</TableCell>
                          <TableCell>{q.correct_answer}</TableCell>
                          <TableCell>{q.category || 'General'}</TableCell>
                          <TableCell>{q.difficulty || 'Medium'}</TableCell>
                          <TableCell>
                            <IconButton 
                              size="small" 
                              color="error" 
                              onClick={() => handleRemoveQuestion(index)}
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Box>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseQuestionsDialog}>Cancel</Button>
          <Button 
            variant="contained" 
            onClick={handleSubmitQuestions}
            disabled={questions.length === 0}
          >
            Upload Questions
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Qualified Users Dialog */}
      <Dialog open={openQualifiedUsersDialog} onClose={handleCloseQualifiedUsersDialog} maxWidth="md" fullWidth>
        <DialogTitle>Qualified Users</DialogTitle>
        <DialogContent>
          {qualifiedUsers.length === 0 ? (
            <Typography sx={{ p: 2 }}>
              No qualified users found for this season.
            </Typography>
          ) : (
            <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell>Rank</TableCell>
                    <TableCell>Username</TableCell>
                    <TableCell>Email</TableCell>
                    <TableCell>Score</TableCell>
                    <TableCell>Percentage</TableCell>
                    <TableCell>Completed</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {qualifiedUsers.map((user, index) => (
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseQualifiedUsersDialog}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

// Add missing RadioButtonUncheckedIcon
const RadioButtonUncheckedIcon: React.FC = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>
  </svg>
);

export default SeasonManager;
